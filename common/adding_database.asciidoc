== Adding a Database

Now it's time to get to the part of the workshop you have all been waiting for - getting PostGIS up and running!

=== Making a project

Let's make a new project for this application:

[source, bash]
----

> oc new-project spatialapp
Now using project "spatialapp" on server "https://10.2.2.2:8443"...

----

That's it - you now a project "spatialapp" and all the subsequent commands will affect this project until you swith to another project.

=== Preparing your GitHub repository

The only reason we are working with the GitHub repository here and not in the code pieces is because we need to get the DDL files to our machine. If we weren't using these DDL files you could skip right to the "Generating Database Pieces" section.

The source code for this project can be found here:

https://github.com/thesteve0/v3simple-spatial

Now *BEFORE* you go and _git clone_ it down to your machine, you need to fork it. See that button up towards the top right that says fork on it - [underline]#click it# (you did login with your github account right?)

image::images/common/2_fork.png[]

Now you should be looking at URL that replaces _thesteve0_ with your github userid:

https://github.com/<your_userid>/v3simple-spatial

This repository is set up for several different learning paths and so it has several different versions of app.py (the file that runs in a web app for Python). We need to rename the current app.py to 1_app.py. It's very easy to do from the web interface:

1. click on the app.py file
2. click on the pencil icon on the far right of the page
3. change the name of the file to 1_app.py (a box right above the edit file box)
4. Scroll down to the *Commit changes* area on the bottom of the page and enter a message
5. Hit the Commit Changes button

There, you just changed the name of the file in your repository.

Now go back to the top level of your repository and follow the same process to rename _3_app.py_ to _app.py_.

In the end your repository should look this:

image::images/common/github_repo.png[]

Go ahead and clone this repository to your machine.

=== Generating the Database Pieces

In the terminal, please go to the location on your machine where you cloned the Crunchy Solutions repository. Go to the _\examples\openshift\workshop_ directory.
We are going to use a bunch of files in this directory but let's go ahead by creating our master instances:

[source, bash]
----

 > oc new-app -p CCP_IMAGE_TAG=centos7-9.5-1.2.2 -f master.json
 > oc new-app -p CCP_IMAGE_TAG=centos7-9.5-1.2.2 -f replicas.json

----

That's it - thanks to the work by Jeff you now have a master-replica PostGIS database setup. You can see it in the web overview for the project now. One of the cool things besides the replica is Jeff added some other containers to the master pod (log collection and metric collection).  I will talk through the pieces in class.

=== Loading the Database

Let's go ahead and load up the database in the master with some DDL. In the v3simple-spatial repository https://github.com/thesteve0/v3simple-spatial.git there is already a SQL file with all our DDL statements. Please clone the repository and then change into the root of the repository.

[source, bash]
----
# we need to get the master pod - it will have a different name on your machine
> oc get pods
NAME                 READY     STATUS    RESTARTS   AGE
master             3/3       Running   0          13m
replica-dc-1-m46ri   1/1       Running   0          4m

#Look for the container named pg - we will need this below
> oc describe pods pgmaster

 > oc rsync ./ddl master:/tmp/. -c pg

----

You may receive a warning that rsync is not found on your machine but the command line tool will fall back to other methods to try and copy the files over. We have now put the DDL file in _/tmp/ddl_ in the Master postgis pod.

Let's shell into that same pod and load the data (you can also do this from the terminal in the web browser but then you can use copy and paste)

[source, bash]
----

> oc rsh -c pg gmaster
sh-4.2$ psql -l
                             List of databases
   Name    |  Owner   | Encoding  | Collate | Ctype |   Access privileges
-----------+----------+-----------+---------+-------+-----------------------
 postgres  | postgres | SQL_ASCII | C       | C     |
 template0 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
 template1 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
 userdb    | postgres | SQL_ASCII | C       | C     | =Tc/postgres         +
           |          |           |         |       | postgres=CTc/postgres+
           |          |           |         |       | testuser=CTc/postgres
(4 rows)

sh-4.2$ psql -h 127.0.0.1 -f /tmp/ddl/parkcoord.sql  userdb
CREATE TABLE
CREATE INDEX
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1...

sh-4.2$ psql -h 127.0.0.1 userdb
userdb=# select count(*) from parkpoints;
 count
--
   547
(1 row)

userdb=# \q
----

You have now loaded your database with a bunch of points for national parks in the US and Canada. The really amazing part comes next. Go ahead and go to the overview for the project. Go ahead and click on the circle for the _pg-slave-rc_ which will bring you to a listing with a single pod. Go ahead and click on that link. On the page for the pod, click on the terminal tab:

image::images/common/3_terminal.png[]

On the resulting page you need to click twice on the terminal area to give it focus BUT you are now in terminal in the running pod - slick.

In that terminal go ahead and type the following commands:

[source, bash]
----
sh-4.2$ psql -h 127.0.0.1 userdb
psql (9.5.2)
Type "help" for help.

userdb=# select count(*) from parkpoints;
count
---
547
(1 row)

----

Do you REALIZE what just happened. We entered data into the Master DB and it was automatically replicated over to the slave DB and did 0 work to make sure that would happen.

=== Time for More Replication Magic

Let's take this to even another level. In the web console, go back to the overview again and then click on the little up arrow next to the slave pods:

image::images/common/3_scale.png[]

The number inside the circle will increment to 2 and then the blue circle will fill in the rest of the circle. You now have 2 replicas running. If you click on the circle again you will see the list of the two pods. If you click on the new pod and then do the commands above you will see that it has already been replicated to the new replica.

In the next section we will write an application to use the master and the replicas. Make sure you have cloned the v3simple-spatial repo. to the local machine.

<<<
