== Adding a Database

Now it's time to get to the part of the workshop you have all been waiting for - getting PostGIS up and running! Before we do this though I need to explain just a bit more about how OpenShift works.

All of this work we have done so far has created entries in a database internal to OpenShift (stored in etcd to be exact). You can actually get OpenShift to give you back this information in YAML or JSON format. You can then take that information and give it to another OpenShift instance and get the exact same infrastructure. You can also edit or distribute that JSON or YAML to other people as configuration for their applications. We call these JSON or YAML files templates.

There is also no need to give all the JSON or YAML,  you can just distribute pieces of the "infrastructure". The other cool thing you can do is add parameters to the file that can be autogenerated at time of ingestion. These paramters can also be used throughout the same file, insuring that all pieces - like a DB and an app server - get the same values for a setting.

Let's go ahead and look at the JSON for the stuff we have created so far. In the terminal go ahead and do:

[source, bash]
----

> oc get svc,dc,bc -o json

----

This will give you the JSON for the services, deploymentConfigs, and buildConfigs you have already created. I will quickly talk through some of the what we are seeing but I, in no way, intend to do a deep dive in this class.


=== Generating the Database Pieces

In the terminal, please go to the location on your machine where you cloned the Crunchy Solutions repository. Go to the _examples/openshift/master-slave-dc_ directory. We are going to use the file _master-slave-rc-dc-slaves-only.json_ and you can open it in your favorite text editor now. I am not expecting you to understand it but I want to show you the parameters. Now that we are done talking about it let's do it:


[source, bash]
----

 > oc new-app -p CCP_IMAGE_TAG=1.2.1 master-slave-rc-dc-slaves-only.json

----

That's it - thanks to the work by Jeff you now have a master-replica PostGIS database setup. You can see it in the web overview for the project now. I will talk through the pieces in class.

=== Loading the Database

Let's go ahead and load up the database in the master with some DDL. In the v3simple-spatial repository https://github.com/thesteve0/v3simple-spatial.git there is already a SQL file with all our DDL statements. Please clone the repository and then change into the root of the repository.

[source, bash]
----
# we need to get the master pod - it will have a different name on your machine
> oc get pods
NAME                   READY     STATUS    RESTARTS   AGE
pg-master-rc-dc        1/1       Running   0          2d
pg-slave-rc-1-obd02    1/1       Running   0          2d

#Look for the conainer named server - we will need this below
> oc describe pods pg-master-rc-dc

 oc rsync ./ddl pg-master-rc-dc:/tmp/. -c server

----

You may receive a warning that rsync is not found on your machine but the command line tool will fall back to other methods to try and copy the files over. We have now put the DDL file in _/tmp/ddl_ in the Master postgis pod.

Let's shell into that same pod and load the data

[source, bash]
----

> oc rsh -c server pg-master-rc-dc
sh-4.2$ psql -l
                             List of databases
   Name    |  Owner   | Encoding  | Collate | Ctype |   Access privileges
-----------+----------+-----------+---------+-------+-----------------------
 postgres  | postgres | SQL_ASCII | C       | C     |
 template0 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
 template1 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
 userdb    | postgres | SQL_ASCII | C       | C     | =Tc/postgres         +
           |          |           |         |       | postgres=CTc/postgres+
           |          |           |         |       | testuser=CTc/postgres
(4 rows)

sh-4.2$ psql -f /tmp/ddl/parkcoord.sql  userdb
CREATE TABLE
CREATE INDEX
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1...

sh-4.2$ psql userdb
userdb=# select count(*) from parkpoints;
 count
--
   547
(1 row)

userdb=# \q
----

You have now loaded your database with a bunch of points for national parks in the US and Canada. The really amazing part comes next. Go ahead and go to the overview for the project. Go ahead and click on the circle for the _pg-slave-rc_ which will bring you to a listing with a single pod. Go ahead and click on that link. On the page for the pod, click on the terminal tab:

image::images/common/3_terminal.png[]

On the resulting page you need to click twice on the terminal area to give it focus BUT you are now in terminal in the running pod - slick.

In that terminal go ahead and type the following commands:

[source, bash]
----
sh-4.2$ psql userdb
psql (9.5.2)
Type "help" for help.

userdb=# select count(*) from parkpoints;
count
---
547
(1 row)

----

Do you REALIZE what just happened. We entered data into the Master DB and it was automatically replicated over to the slave DB and did 0 work to make sure that would happen.

=== Time for More Replication Magic.

Let's take this to even another level. In the web console, go back to the overview again and then click on the little up arrow next to the slave pods:

image::images/common/3_scale.png[]

The number inside the circle will increment to 2 and then the blue circle will fill in the rest of the circle. You now have 2 replicas running. If you click on the circle again you will see the list of the two pods. If you click on the new pod and then do the commands above you will see that it has already been replicated to the new replica.

In the next section we will write an application to use the master and the replicas. Make sure you have cloned the v3simple-spatial repo. to the local machine.

<<<
