== Templates and OpenShift/Kubernetes Declarative Syntax

As I explained before, Kubernetes and OpenShift use a declarative model of the world - you tell the cluster what the truth is and the cluster then goes about making it so. OpenShift let's you declare the truth in a file, either YAML or JSON syntax, whichever you prefer. In this section we are going to VERY brielfy look at some of these files and leave with pointers to more information if you want to dive in more.

The OpenShift Master exposes a http://swagger.io/[Swagger] API if you want to really dig in and see what is exposed. You can hit this URL
https://10.2.2.2:8443/swaggerapi/api/v1

You can also look at any of the YAML for any of the resources in your names space by clicking on the top right drop down and selecting "Edit". This will let you live edit the YAML for any of your resources and apply the changes immediately. Here is an example showing you how to open the YAML for your pod:

image::images/common/8_pod_edit_yaml.png[]

We are not going to change any of the YAML right now but you can look at it. You will see a _labels_ section, these are the labels for the pods that can be used by selectors on other resources.

The main docs for understanding more about the OpenShift/Kubernetes Objects starts on the https://docs.openshift.org/latest/rest_api/index.html[OpenShift Documentation] but then links out for further explanation on Kubernetes native objects.

=== Simple Examples

In the OpenShift Origin GitHub repository there is an example called https://github.com/openshift/origin/tree/master/examples/hello-openshift["Hello OpenShift"]. I will walk through this with you in the class.

Inside this is probably the simplest JSON you can find, which defines a project:

https://github.com/openshift/origin/blob/master/examples/hello-openshift/hello-project.json

And there is also one to define a pod:

https://github.com/openshift/origin/blob/master/examples/hello-openshift/hello-pod.json

After talking through these you should have a fairly basic understanding of how these files are structured.

=== Full Templates

Templates take this basic structure and allow you the ability to create much more complete and interesting collection of resources, including full applications.

We don't have time in this workshop to really cover all that you can do with the a template, but one of the most interesting things is parameterized input. As a template developer you can make certain variables in your template, say database username and password, to parameters. This way you can do two things:

1. You can allow users to input their own values when they process the template. If you enable this feature then the user is required to input a value to make sure the template actually works.
2. If you want to provide an autogenerated default value for the paramterized field you can specify a generating expression to create a value. For example:

[source, JavaScript]
----

{
    "name": "ADMIN_PASSWORD",
    "description": "administrator password",
    "generate": "expression",
    "from": "[a-zA-Z0-9]{8}"
},

----

Back in GitHub there are different template examples put together by the OpenShift team. There are two which are particularly helpful:

1. https://github.com/openshift/origin/tree/master/examples/sample-app[*sample-app*] - this template provides an example of setting up a Ruby application with a MongoDB database. It shows how to parameterize everything and wire things together. It also shows how to do different build types in OpenShift. If we are good on time I will quickly walk us through the https://github.com/openshift/origin/blob/master/examples/sample-app/application-template-stibuild.json[S2I build example].

2. https://github.com/openshift/django-ex[*Django-ex*] - this a quickstart put together to help you get started with Django very quickly. Inside this project there is a template to get https://github.com/openshift/django-ex/blob/master/openshift/templates/django-postgresql.json[Django and PostgreSQL] up and running in an OpenShift cluster. There are more of these templates, such as https://github.com/openshift/nodejs-ex[Node.js] and https://github.com/openshift/rails-ex[Rails]. Just look in the openshift/templates directory to see more example templates.

If you want to learn more about templates, there is documentation on them in the
https://docs.openshift.org/latest/architecture/core_concepts/templates.html#architecture-core-concepts-templates[architecture section] and in the https://docs.openshift.org/latest/dev_guide/templates.html[developer guide].

=== Import/Export

One of the really useful byproducts of having a declarative API mean import and export becomes very easy. Let's go ahead and export our simple application and then import it into a new namespace.

First we need to export the JSON (my preferred format) for our existing application. This is quite simple:

. Export our current application as a template text file:
[source, console]
----
oc export is,dc,svc,bc,route --as-template=json -o json > simple_spatial.json
----
We have now created a template that lists all of our project resources, except pods, as a template. We do not export the pods because we actually want our project to recreate the new pods.
If we wanted to move the pods over exactly then we would have to put the containers we created into a registry our new project will have access to and then name the containers by name.

[start=2]
. Create a new project to import our project into
[source, console]
----
oc new-project newproject
----

[start=3]
. Open simple_spatial.json in your favorite text editor. After you do that do a global search and replace of "spatialapp" with "newproject". And remove the Sha signature from the item that looks like:
[source, console]
----
BEFORE
  - image: 172.30.182.216:5000/spatialapp/simple-spatial@sha256:b0379d1e921087aa267a9bb5e4602d1ec51948f88dfd83c4d65f24c133654102

AFTER

- image: 172.30.182.216:5000/newproject/simple-spatial

----

[start=4]
. Make sure you are in the newproject project and then just do the new-app command on simple-spatial.json
[source, console]
----

oc new-app simple_spatial.json

----

[start=5]
. PROFIT!!!

You can use these steps to move between any OpenShift instances as well - as long as they can see the same git repos and Docker registries.

Now with that business done, let's add a database to our application!

<<<
